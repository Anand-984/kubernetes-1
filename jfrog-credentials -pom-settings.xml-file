jfrog

email:984.anand.985@gmail.com
password:Anand@444
Nameof Environment: nogirlfriend   serverName

userName:Anand
password: Anand@444


organizationName:nogirlfriend
projectName:noproblem
projectkey:noproblem



1.Deploy{after successfull built where to store the build artifactory is defined in this field i.e in the distributionManagement section of pom.xml file this is the responsiblity of devops engineer}
To deploy build artifacts through Artifactory you need to add a deployment element with the URL of a target local repository to which you want to deploy your artifacts. For example:   inthe pom.xml  file
<distributionManagement>
    <repository>
        <id>central</id>
        <name>a0kbqgimfzrtu-artifactory-primary-0-releases</name>
        <url>https://nogirlfriend.jfrog.io/artifactory/noproblem-local</url>
    </repository>
    <snapshotRepository>
        <id>snapshots</id>
        <name>a0kbqgimfzrtu-artifactory-primary-0-snapshots</name>
        <url>https://nogirlfriend.jfrog.io/artifactory/noproblem-local</url>
    </snapshotRepository>
</distributionManagement>



2.configure  -----this is to pass the JFROG credentials to the maven
copy the data and paste it in settngs.xml file which has to be create under /root/.m2/settings.xml location paste repalace the username with jfrog username and password should be in an encrypted format.{go bottom of the page to find how to encrypt}
 
<?xml version="1.0" encoding="UTF-8"?>
<settings xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0 http://maven.apache.org/xsd/settings-1.2.0.xsd" xmlns="http://maven.apache.org/SETTINGS/1.2.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <servers>
    <server>
      <username>${security.getCurrentUsername()}</username>
      <password>${security.getEscapedEncryptedPassword()!"*** Insert encrypted password here ***"}</password>
      <id>central</id>
    </server>
    <server>
      <username>${security.getCurrentUsername()}</username>
      <password>${security.getEscapedEncryptedPassword()!"*** Insert encrypted password here ***"}</password>
      <id>snapshots</id>
    </server>
  </servers>
  <profiles>
    <profile>
      <repositories>
        <repository>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
          <id>central</id>
          <name>default-maven-virtual</name>
          <url>https://nogirlfriend.jfrog.io/artifactory/default-maven-virtual</url>
        </repository>
        <repository>
          <snapshots />
          <id>snapshots</id>
          <name>default-maven-virtual</name>
          <url>https://nogirlfriend.jfrog.io/artifactory/default-maven-virtual</url>
        </repository>
      </repositories>
      <pluginRepositories>
        <pluginRepository>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
          <id>central</id>
          <name>default-maven-virtual</name>
          <url>https://nogirlfriend.jfrog.io/artifactory/default-maven-virtual</url>
        </pluginRepository>
        <pluginRepository>
          <snapshots />
          <id>snapshots</id>
          <name>default-maven-virtual</name>
          <url>https://nogirlfriend.jfrog.io/artifactory/default-maven-virtual</url>
        </pluginRepository>
      </pluginRepositories>
      <id>artifactory</id>
    </profile>
  </profiles>
  <activeProfiles>
    <activeProfile>artifactory</activeProfile>
  </activeProfiles>
</settings>


   { 	search in google "maven server password encryption"
	https://maven.apache.org/guides/mini/guide-encryption.html
	
	     1.create master password
	     >mvn --encrypt-master-password <password>  (it could be any password not jfrog password)     mavenmaster or anything
             mvn --encrypt-master-password mavenmaster
             This command will produce an encrypted version of the password, something like

	     {jSMOWnoPFgsHVpMvz5VrIt5kRbzGpI8u+9EF1iFQyJQ=}
	     Store this password in the ${user.home}/.m2/settings-security.xml;(/root/.m2/settings-security.xml) it should look like

  		  <settingsSecurity>
    		  <master>{jSMOWnoPFgsHVpMvz5VrIt5kRbzGpI8u+9EF1iFQyJQ=}</master>
   		  </settingsSecurity>
   		  When this is done, you can start encrypting existing server passwords.
   		  
   	      2.encrypt server password  (jfrog password)
   	      >mvn --encrypt-password <password>   (it could be the jfrod user password)
   	      >mvn --encrypt-password Anand@444
   	      This command produces an encrypted version of it, something like

	      {COQLCE6DU6GtcS5P=}    
	      Copy and paste it into the servers section of your settings.xml file. This will look like:
    <settings>
    ...
      <servers>
    ...
        <server>
          <id>my.server</id>
          <username>foo</username>          =======<username>Anand</username> ======  
          <password>{COQLCE6DU6GtcS5P=}</password>    ========<password>{COQLCE6DU6GtcS5P=}</password>======
        </server>
    ...
      </servers>
    ...
    </settings>       
    
         }



